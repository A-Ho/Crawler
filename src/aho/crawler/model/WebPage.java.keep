/*
 * Copyright (c) 2009. 財團法人資訊工業策進會. All right reserved.
 */
package model;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.ArrayList;
import java.util.List;

import org.htmlparser.Node;
import org.htmlparser.Parser;
import org.htmlparser.nodes.RemarkNode;
import org.htmlparser.nodes.TagNode;
import org.htmlparser.nodes.TextNode;
import org.htmlparser.tags.LinkTag;
import org.htmlparser.util.NodeIterator;
import org.htmlparser.util.NodeList;
import org.htmlparser.util.ParserException;

import utils.HttpProxySetter;

/**
 * 單一網頁的資料結構
 * 
 * @author 960122
 */
public class WebPage {
	
	/** 網址 */
	private String url;
	
	/** 所在的網頁 tree 層級 */
	private Integer level;
	
	/** 純文字內容 */
	private StringBuilder contentText = new StringBuilder();
	
	/** 分支超連結 */
	private List<String> hyperLinkList = new ArrayList<String>();
	
	/** html 碼 */
	private StringBuilder htmlCode = new StringBuilder();
	
	public WebPage(final String url){
		this.url = url;
	}
	
	public static WebPage createWebPage(final String hyperlink, Integer level){
		WebPage webPage = new WebPage(hyperlink);
		webPage.setLevel(level);
		webPage.parse();
		return webPage;
	}
	

	public static void main(String[] args) {
		HttpProxySetter.IIISetting();
		
		WebPage wp = new WebPage("http://tw.search.bid.yahoo.com/search/ac?ei=UTF-8&p=%E4%BD%8F%E5%AE%BF%E5%88%B8");
		System.out.println(wp.getHtmlCode());
	}
	
	/**
	 * 取得該網址的 html code
	 */
	public String getHtmlCode() {

		if(this.htmlCode == null || this.htmlCode.length() == 0){
			java.io.InputStream urlStream = null;
			try {
				URL linkUrl = new URL(this.url);
				HttpURLConnection httpConnection = (java.net.HttpURLConnection) linkUrl.openConnection();
				httpConnection.connect();
				urlStream = httpConnection.getInputStream();
				BufferedReader bufferReader = new BufferedReader(new java.io.InputStreamReader(urlStream, "UTF-8"));
				
				String tmpLine = "";
				while ((tmpLine = bufferReader.readLine()) != null) {
					this.htmlCode.append(tmpLine).append("\n");
				}
				
			} catch (UnsupportedEncodingException e1) {
				e1.printStackTrace();
			} catch (IOException e) {
				System.out.println("剖析網頁發生錯誤:\n" + e);
			} catch (Exception e) {
				System.out.println("連接網頁錯誤:\n" + e);
			}
		}
		
		return this.htmlCode.toString();
	}

	/** 執行剖析 */
	private void parse(){
		try {
			Parser parser = new Parser(this.url);
			parser.setEncoding("UTF-8"); 
			for (NodeIterator i = parser.elements(); i.hasMoreNodes(); ){
				processMyNodes (i.nextNode());
			}
		} catch (ParserException e) {
			System.out.println("processMyNodes() 時發生剖析錯誤:" + this.url);
			e.printStackTrace();
		}
	}
	
	private void processMyNodes (Node node) {
		
		if (node instanceof TextNode)
		{
			TextNode text = (TextNode)node;
//			this.contentText.append(text.getText());
		}
		if (node instanceof RemarkNode)
		{
			// downcast to RemarkNode
			RemarkNode remarkNode = (RemarkNode)node;
			// do whatever processing you want with the comment
			
		}
		if(node instanceof LinkTag){
			LinkTag linkTag = (LinkTag)node;
			this.hyperLinkList.add(linkTag.getLink());
		}
		else if (node instanceof TagNode)
		{
			// downcast to TagNode
			TagNode tag = (TagNode)node;
			// do whatever processing you want with the tag itself
			// ...
			// process recursively (nodes within nodes) via getChildren()
			NodeList nl = tag.getChildren ();
			if (null != nl)
				try {
					for (NodeIterator i = nl.elements (); i.hasMoreNodes(); ){
						processMyNodes (i.nextNode());
					}
				} catch (ParserException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
		}
	}
	
	private boolean varifyHyperlink(final String hyperlink){

		// 驗證網址格式
		if(!hyperlink.startsWith("http://") && !hyperlink.startsWith("https://")){
			System.out.println("網址格式錯誤: " + hyperlink);
			return false;
		}
		
		// 驗證是否為可連線網頁
		try {
			java.net.URL url;
			url = new java.net.URL(hyperlink);
			HttpURLConnection con = (HttpURLConnection) url.openConnection();
			con.setRequestProperty("user-agent", "Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.0)");
			if(con.getResponseCode() != 200){
				System.out.println("不可連線: " + hyperlink);
				return false;
			}
		} catch (MalformedURLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		return true;
	}
	
	/**
	 * @return the level
	 */
	public Integer getLevel() {
		return level;
	}

	/**
	 * @param level the level to set
	 */
	public void setLevel(Integer level) {
		this.level = level;
	}
	
	/**
	 * @return the url
	 */
	public String getUrl() {
		return url;
	}

	/**
	 * @param url the url to set
	 */
	public void setUrl(String url) {
		this.url = url;
	}
	
	/**
	 * 取得網頁中的 text 
	 */
	public String getContentText(){
		return this.contentText.toString();
	}
	
	/**
	 * @return the hyperLinkList
	 */
	public List<String> getHyperLinkList() {
		return this.hyperLinkList;
	}
	
}
